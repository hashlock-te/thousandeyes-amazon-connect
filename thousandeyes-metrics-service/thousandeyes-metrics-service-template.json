{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "The AWS CloudFormation template for this Serverless application",
    "Resources": {
      "ServerlessDeploymentBucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [
              {
                "ServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }
        }
      },
      "ServerlessDeploymentBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "s3:*",
                "Effect": "Deny",
                "Principal": "*",
                "Resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::",
                        {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "/*"
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::",
                        {
                          "Ref": "ServerlessDeploymentBucket"
                        }
                      ]
                    ]
                  }
                ],
                "Condition": {
                  "Bool": {
                    "aws:SecureTransport": false
                  }
                }
              }
            ]
          }
        }
      },
      "EndpointLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "LogGroupName": "/aws/lambda/monitor-dev-endpoint"
        }
      },
      "StatusLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
          "LogGroupName": "/aws/lambda/monitor-dev-status"
        }
      },
      "IamRoleLambdaExecution": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": {
                "Fn::Join": [
                  "-",
                  [
                    "monitor",
                    "dev",
                    "lambda"
                  ]
                ]
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogStream",
                      "logs:CreateLogGroup"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/monitor-dev*:*"
                      }
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:PutLogEvents"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/monitor-dev*:*:*"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "Path": "/",
          "RoleName": {
            "Fn::Join": [
              "-",
              [
                "monitor",
                "dev",
                {
                  "Ref": "AWS::Region"
                },
                "lambdaRole"
              ]
            ]
          }
        }
      },
      "EndpointLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "S3Key": "serverless/monitor/dev/1635268925338-2021-10-26T17:22:05.338Z/monitor.zip"
          },
          "Handler": "handler.endpoint",
          "Runtime": "nodejs12.x",
          "FunctionName": "monitor-dev-endpoint",
          "MemorySize": 1024,
          "Timeout": 6,
          "Environment": {
            "Variables": {
              "TE_USER": {
                "Ref": "ThousandEyesUser"
              },
              "TE_TOKEN": {
                "Ref": "ThousandEyesUserToken"
              }
            }
          },
          "Role": {
            "Fn::GetAtt": [
              "IamRoleLambdaExecution",
              "Arn"
            ]
          }
        },
        "DependsOn": [
          "EndpointLogGroup"
        ]
      },
      "StatusLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "S3Key": "serverless/monitor/dev/1635268925338-2021-10-26T17:22:05.338Z/monitor.zip"
          },
          "Handler": "handler.status",
          "Runtime": "nodejs12.x",
          "FunctionName": "monitor-dev-status",
          "MemorySize": 1024,
          "Timeout": 6,
          "Role": {
            "Fn::GetAtt": [
              "IamRoleLambdaExecution",
              "Arn"
            ]
          }
        },
        "DependsOn": [
          "StatusLogGroup"
        ]
      },
      "EndpointLambdaVersionOZSA2pJwdlaq7WizfVtobefGBvR3wCUZhqOJaZ7koU": {
        "Type": "AWS::Lambda::Version",
        "DeletionPolicy": "Retain",
        "Properties": {
          "FunctionName": {
            "Ref": "EndpointLambdaFunction"
          },
          "CodeSha256": "9aCRURz0smHc3RU4vNX2QQCvWY5SnEuAJ2PhVHyDNTY="
        }
      },
      "StatusLambdaVersion1YGMJAbN1gRTzlWymiKCByjSqTSmyymEbJ0vaus": {
        "Type": "AWS::Lambda::Version",
        "DeletionPolicy": "Retain",
        "Properties": {
          "FunctionName": {
            "Ref": "StatusLambdaFunction"
          },
          "CodeSha256": "9aCRURz0smHc3RU4vNX2QQCvWY5SnEuAJ2PhVHyDNTY="
        }
      },
      "ApiGatewayRestApi": {
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
          "Name": "dev-monitor",
          "EndpointConfiguration": {
            "Types": [
              "EDGE"
            ]
          },
          "Policy": ""
        }
      },
      "ApiGatewayResourceEndpoint": {
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "ParentId": {
            "Fn::GetAtt": [
              "ApiGatewayRestApi",
              "RootResourceId"
            ]
          },
          "PathPart": "endpoint",
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          }
        }
      },
      "ApiGatewayResourceStatus": {
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "ParentId": {
            "Fn::GetAtt": [
              "ApiGatewayRestApi",
              "RootResourceId"
            ]
          },
          "PathPart": "status",
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          }
        }
      },
      "ApiGatewayMethodEndpointOptions": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "MethodResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": true,
                "method.response.header.Access-Control-Allow-Headers": true,
                "method.response.header.Access-Control-Allow-Methods": true
              },
              "ResponseModels": {}
            }
          ],
          "RequestParameters": {},
          "Integration": {
            "Type": "MOCK",
            "RequestTemplates": {
              "application/json": "{statusCode:200}"
            },
            "ContentHandling": "CONVERT_TO_TEXT",
            "IntegrationResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": "'*'",
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                  "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                },
                "ResponseTemplates": {
                  "application/json": ""
                }
              }
            ]
          },
          "ResourceId": {
            "Ref": "ApiGatewayResourceEndpoint"
          },
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          }
        }
      },
      "ApiGatewayMethodStatusOptions": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "MethodResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": true,
                "method.response.header.Access-Control-Allow-Headers": true,
                "method.response.header.Access-Control-Allow-Methods": true
              },
              "ResponseModels": {}
            }
          ],
          "RequestParameters": {},
          "Integration": {
            "Type": "MOCK",
            "RequestTemplates": {
              "application/json": "{statusCode:200}"
            },
            "ContentHandling": "CONVERT_TO_TEXT",
            "IntegrationResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": "'*'",
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                  "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                },
                "ResponseTemplates": {
                  "application/json": ""
                }
              }
            ]
          },
          "ResourceId": {
            "Ref": "ApiGatewayResourceStatus"
          },
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          }
        }
      },
      "ApiGatewayMethodEndpointGet": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "HttpMethod": "GET",
          "RequestParameters": {},
          "ResourceId": {
            "Ref": "ApiGatewayResourceEndpoint"
          },
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          },
          "ApiKeyRequired": false,
          "AuthorizationType": "NONE",
          "Integration": {
            "IntegrationHttpMethod": "POST",
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "EndpointLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          },
          "MethodResponses": []
        }
      },
      "ApiGatewayMethodStatusGet": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "HttpMethod": "GET",
          "RequestParameters": {},
          "ResourceId": {
            "Ref": "ApiGatewayResourceStatus"
          },
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          },
          "ApiKeyRequired": false,
          "AuthorizationType": "NONE",
          "Integration": {
            "IntegrationHttpMethod": "POST",
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "StatusLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          },
          "MethodResponses": []
        }
      },
      "ApiGatewayDeployment1635268922631": {
        "Type": "AWS::ApiGateway::Deployment",
        "Properties": {
          "RestApiId": {
            "Ref": "ApiGatewayRestApi"
          },
          "StageName": "dev"
        },
        "DependsOn": [
          "ApiGatewayMethodEndpointOptions",
          "ApiGatewayMethodStatusOptions",
          "ApiGatewayMethodEndpointGet",
          "ApiGatewayMethodStatusGet"
        ]
      },
      "EndpointLambdaPermissionApiGateway": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": {
            "Fn::GetAtt": [
              "EndpointLambdaFunction",
              "Arn"
            ]
          },
          "Action": "lambda:InvokeFunction",
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                "/*/*"
              ]
            ]
          }
        }
      },
      "StatusLambdaPermissionApiGateway": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": {
            "Fn::GetAtt": [
              "StatusLambdaFunction",
              "Arn"
            ]
          },
          "Action": "lambda:InvokeFunction",
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                "/*/*"
              ]
            ]
          }
        }
      }
    },
    "Outputs": {
      "ServerlessDeploymentBucketName": {
        "Value": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "Export": {
          "Name": "sls-monitor-dev-ServerlessDeploymentBucketName"
        }
      },
      "EndpointLambdaFunctionQualifiedArn": {
        "Description": "Current Lambda function version",
        "Value": {
          "Ref": "EndpointLambdaVersionOZSA2pJwdlaq7WizfVtobefGBvR3wCUZhqOJaZ7koU"
        },
        "Export": {
          "Name": "sls-monitor-dev-EndpointLambdaFunctionQualifiedArn"
        }
      },
      "StatusLambdaFunctionQualifiedArn": {
        "Description": "Current Lambda function version",
        "Value": {
          "Ref": "StatusLambdaVersion1YGMJAbN1gRTzlWymiKCByjSqTSmyymEbJ0vaus"
        },
        "Export": {
          "Name": "sls-monitor-dev-StatusLambdaFunctionQualifiedArn"
        }
      },
      "ServiceEndpoint": {
        "Description": "URL of the service endpoint",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "ApiGatewayRestApi"
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region"
              },
              ".",
              {
                "Ref": "AWS::URLSuffix"
              },
              "/dev"
            ]
          ]
        },
        "Export": {
          "Name": "sls-monitor-dev-ServiceEndpoint"
        }
      }
    },
    "Parameters": {
      "ThousandEyesUser": {
        "Default": "hashlock@thousandeyes.com",
        "Description": "ThousandEyes user email",
        "Type": "String"
      },
      "ThousandEyesUserToken": {
        "Default": "ncea6wpdaeps5vnxwpmc1eo0tvkjb5p5",
        "Description": "ThousandEyes user API token",
        "Type": "String",
        "MinLength": 32,
        "MaxLength": 32,
        "AllowedPattern": "[A-Za-z0-9]*",
        "NoEcho": true
      }
    }
  }